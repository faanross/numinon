package clientapi

// ListAgentsPayload is the data for the ActionListAgents request (currently empty, could have filters).
type ListAgentsPayload struct {
	// Filters could be added here later, e.g., FilterByStatus string `json:"filter_by_status,omitempty"`
}

// AgentInfo is the structure for reporting information about a single agent.
type AgentInfo struct {
	AgentID           string `json:"agent_id"`
	FirstSeen         string `json:"first_seen"`
	LastSeen          string `json:"last_seen"`
	SourceIP          string `json:"source_ip"`                     // IP address from which the agent connects
	CurrentListenerID string `json:"current_listener_id,omitempty"` // Which listener it's talking to
	Status            string `json:"status,omitempty"`              // TODO implement status reporting to Client, currently missing
	OS                string `json:"os,omitempty"`                  // Operating System (e.g., "windows", "linux")
	Arch              string `json:"arch,omitempty"`                // Architecture (e.g., "amd64", "arm64")
	Hostname          string `json:"hostname,omitempty"`
	Username          string `json:"username,omitempty"`
	PID               int    `json:"pid,omitempty"`
}

// AgentListPayload is used in ServerResponse when DataType is DataTypeAgentList.
type AgentListPayload struct {
	Agents []AgentInfo `json:"agents"`
}

// GetAgentDetailsPayload is the data required for the ActionGetAgentDetails request.
type GetAgentDetailsPayload struct {
	AgentID string `json:"agent_id"` // The ID of the agent whose details are being requested
}

// TaskAgentPayload is a generic structure for tasking an agent.
// The actual command arguments will be specific to the command type.
// For ActionTaskAgentRunCmd, the Args field would contain models.RunCmdArgs.
type TaskAgentPayload struct {
	AgentID string `json:"agent_id"` // The ID of the target agent
	// Args will be the specific argument struct for the command,
	// e.g., models.RunCmdArgs, models.UploadArgs
	// The server will unmarshal this into the correct type based on the main Action.
	Args interface{} `json:"args"`
}

// TaskQueuedConfirmationPayload is used in ServerResponse when DataType is DataTypeTaskQueuedConfirmation.
type TaskQueuedConfirmationPayload struct {
	AgentID string `json:"agent_id"`
	TaskID  string `json:"task_id"` // Unique ID for this specific task instance, generated by the server's TaskStore
	Message string `json:"message"`
}
