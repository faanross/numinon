package clientapi

// CreateListenerPayload is used to create the ActionCreateListener request.
type CreateListenerPayload struct {
	Protocol string `json:"protocol"`            // e.g., "H1C", "H1TLS", "WSS" (matches our internal listener types)
	Address  string `json:"address"`             // e.g., "0.0.0.0:8080"
	CertPath string `json:"cert_path,omitempty"` // Path to TLS certificate file, default to config path
	KeyPath  string `json:"key_path,omitempty"`  // Path to TLS key file, default to config path
}

// ListenerStatusPayload is used in ServerResponse when DataType is DataTypeListenerStatus or part of DataTypeListenerList.
type ListenerStatusPayload struct {
	ListenerID string `json:"listener_id"` // A unique ID generated by the server for this listener
	Protocol   string `json:"protocol"`
	Address    string `json:"address"`
	Status     string `json:"status"`            // e.g., "RUNNING", "STOPPED", "ERROR"
	Message    string `json:"message,omitempty"` // Additional info, e.g., error message if status is "ERROR"
}

// StopListenerPayload is the data required for the ActionStopListener request.
type StopListenerPayload struct {
	ListenerID string `json:"listener_id"` // The unique ID of the listener to stop
}

// ListenerStopConfirmationPayload is used in ServerResponse for ActionStopListener.
// Often, just a success status with a message is enough, but we can provide details.
type ListenerStopConfirmationPayload struct {
	ListenerID string `json:"listener_id"`
	Message    string `json:"message"` // e.g., "Listener lst_abc123xyz stopped successfully."
}

// ListenerListPayload will list all active listeners, useful to give update following stop/create of a listener
type ListenerListPayload struct {
	Listeners []ListenerStatusPayload `json:"listeners"`
}
