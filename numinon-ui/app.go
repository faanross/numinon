package main

import (
	"context"
	"numinon-ui/internal/connection"
	"numinon-ui/internal/frontend"
	"numinon-ui/internal/models"
)

// App struct
type App struct {
	ctx     context.Context
	connMgr *connection.Manager
}

// NewApp creates a new App application struct
func NewApp() *App {
	return &App{
		connMgr: connection.NewManager(),
	}
}

// startup is called when the app starts
func (a *App) startup(ctx context.Context) {
	a.ctx = ctx
	a.connMgr.Startup(ctx)
}

// --- Connection Methods (Frontend Accessible) ---
// These methods are now wrappers that call the internal logic and then
// translate the results into frontend-safe DTOs before returning.

// Connect to the C2 server
func (a *App) Connect(serverURL string) frontend.ConnectionStatusDTO {
	// 1. Call the internal logic, which returns the internal model.
	internalStatus := a.connMgr.Connect(serverURL)
	// 2. Translate the internal model to its DTO and return it.
	return frontend.ToConnectionStatusDTO(internalStatus)
}

// Disconnect from the C2 server
func (a *App) Disconnect() frontend.ConnectionStatusDTO {
	// 1. Call internal logic.
	internalStatus := a.connMgr.Disconnect()
	// 2. Translate to DTO.
	return frontend.ToConnectionStatusDTO(internalStatus)
}

// GetConnectionStatus returns current connection status
func (a *App) GetConnectionStatus() frontend.ConnectionStatusDTO {
	// 1. Call internal logic.
	internalStatus := a.connMgr.GetStatus()
	// 2. Translate to DTO.
	return frontend.ToConnectionStatusDTO(internalStatus)
}

// GetAgents returns list of agents
func (a *App) GetAgents() []frontend.AgentDTO {
	// 1. Call internal logic, which returns a slice of internal models.
	internalAgents := a.connMgr.GetAgents()
	// 2. Translate the entire slice to DTOs.
	return frontend.ToAgentDTOs(internalAgents)
}

// SendCommand sends a command to an agent
func (a *App) SendCommand(request models.CommandRequest) frontend.CommandResponseDTO {
	// The incoming 'request' from the frontend can be directly mapped by Wails
	// to the internal 'models.CommandRequest' because it contains no complex types.
	// 1. Call internal logic with the request.
	internalResponse := a.connMgr.SendCommand(request)
	// 2. Translate the response to its DTO.
	return frontend.ToCommandResponseDTO(internalResponse)
}

// GetServerMessageModel is a dummy function to ensure the ServerMessage DTO model is generated by Wails.
// This is crucial for the frontend to be able to correctly type the events it receives from the backend.
func (a *App) GetServerMessageModel() frontend.ServerMessageDTO {
	return frontend.ServerMessageDTO{}
}
